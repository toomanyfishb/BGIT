1. Explain the concept of closures in JavaScript. Provide an example and discuss why closures are important in modern 
   JavaScript development.

    Closures are bundles of functions that remember the environment in which they were created. They are important in 
    modern JavaScript development because they allow for data encapsulation, privacy, and the creation of modules. 
    For example, a closure can be used to create private variables in a function.

2. Describe the differences between var, let, and const in JavaScript. When would you use each of them? Provide 
   examples to illustrate your answer.

   The differences between var, let and const are that var is function-scoped, let is block-scoped and while const is 
   block-scoped also, its value cannot be reassigned. For example:
        var x = 10;
        let y = 20;
        const z = 30;
   

3. What are higher-order functions in JavaScript? Provide an example of a higher-order function and explain its usage.

    Higher-order functions in JavaScript are functions that can take other functions as arguments or return functions. 
    An example of a higher-order function is the 'map' function, which can be used to transform elements in an array.
    For example:
        const numbers = [123];
        const doubleNumbers = numbers.map(num => num * 2);

4. Explain the concept of state and props in React. How do they differ, and how are they used in React component 
   development?

    In React, state is internal to a component and can be changed by the component itself, while props are external 
    and passed down from a parent component. They are different because state is mutable and controlled by the 
    component itself, while props are immutable and controlled by the parent component. They are used in React to
    manage data and pass information between components.


5. Discuss the concept of component lifecycle methods in React. Provide a brief overview of some commonly used 
   lifecycle methods and when they are invoked during the component's lifecycle.

   Component lifecycle methods are methods that are invoked at different stages of a components lifecycle, such as
   mounting, updating, and unmounting. Some commonly used lifecycle methods include 'componentDidMount',
   'componentDidUpdate', and 'componentWillUnmount'. These methods allow developers to perform actions at specific
   points in a component's life.